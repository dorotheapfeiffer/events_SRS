//
// File generated by rootcint at Tue Nov 18 02:32:33 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME mySpyDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "mySpyDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void ATrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_ATrack(void *p = 0);
   static void *newArray_ATrack(Long_t size, void *p);
   static void delete_ATrack(void *p);
   static void deleteArray_ATrack(void *p);
   static void destruct_ATrack(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::ATrack*)
   {
      ::ATrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::ATrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("ATrack", ::ATrack::Class_Version(), "../core/ATrack.h", 16,
                  typeid(::ATrack), DefineBehavior(ptr, ptr),
                  &::ATrack::Dictionary, isa_proxy, 4,
                  sizeof(::ATrack) );
      instance.SetNew(&new_ATrack);
      instance.SetNewArray(&newArray_ATrack);
      instance.SetDelete(&delete_ATrack);
      instance.SetDeleteArray(&deleteArray_ATrack);
      instance.SetDestructor(&destruct_ATrack);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::ATrack*)
   {
      return GenerateInitInstanceLocal((::ATrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::ATrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void AEvent_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_AEvent(void *p = 0);
   static void *newArray_AEvent(Long_t size, void *p);
   static void delete_AEvent(void *p);
   static void deleteArray_AEvent(void *p);
   static void destruct_AEvent(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::AEvent*)
   {
      ::AEvent *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::AEvent >(0);
      static ::ROOT::TGenericClassInfo 
         instance("AEvent", ::AEvent::Class_Version(), "./../core/AEvent.h", 20,
                  typeid(::AEvent), DefineBehavior(ptr, ptr),
                  &::AEvent::Dictionary, isa_proxy, 4,
                  sizeof(::AEvent) );
      instance.SetNew(&new_AEvent);
      instance.SetNewArray(&newArray_AEvent);
      instance.SetDelete(&delete_AEvent);
      instance.SetDeleteArray(&deleteArray_AEvent);
      instance.SetDestructor(&destruct_AEvent);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::AEvent*)
   {
      return GenerateInitInstanceLocal((::AEvent*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::AEvent*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void mySpy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_mySpy(void *p = 0);
   static void *newArray_mySpy(Long_t size, void *p);
   static void delete_mySpy(void *p);
   static void deleteArray_mySpy(void *p);
   static void destruct_mySpy(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::mySpy*)
   {
      ::mySpy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::mySpy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("mySpy", ::mySpy::Class_Version(), "./mySpy.h", 21,
                  typeid(::mySpy), DefineBehavior(ptr, ptr),
                  &::mySpy::Dictionary, isa_proxy, 4,
                  sizeof(::mySpy) );
      instance.SetNew(&new_mySpy);
      instance.SetNewArray(&newArray_mySpy);
      instance.SetDelete(&delete_mySpy);
      instance.SetDeleteArray(&deleteArray_mySpy);
      instance.SetDestructor(&destruct_mySpy);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::mySpy*)
   {
      return GenerateInitInstanceLocal((::mySpy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::mySpy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *ATrack::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *ATrack::Class_Name()
{
   return "ATrack";
}

//______________________________________________________________________________
const char *ATrack::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ATrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int ATrack::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::ATrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void ATrack::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ATrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *ATrack::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::ATrack*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *AEvent::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *AEvent::Class_Name()
{
   return "AEvent";
}

//______________________________________________________________________________
const char *AEvent::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AEvent*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int AEvent::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::AEvent*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void AEvent::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AEvent*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *AEvent::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::AEvent*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *mySpy::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *mySpy::Class_Name()
{
   return "mySpy";
}

//______________________________________________________________________________
const char *mySpy::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mySpy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int mySpy::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::mySpy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void mySpy::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mySpy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *mySpy::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::mySpy*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void mySpy::Streamer(TBuffer &R__b)
{
   // Stream an object of class mySpy.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(mySpy::Class(),this);
   } else {
      R__b.WriteClassBuffer(mySpy::Class(),this);
   }
}

//______________________________________________________________________________
void mySpy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class mySpy.
      TClass *R__cl = ::mySpy::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMain", &fMain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCanvas", &fCanvas);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHorz", &fHorz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHorz2", &fHorz2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLbut", &fLbut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLhorz", &fLhorz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLcan", &fLcan);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGet", &fGet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fConnect", &fConnect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fQuit", &fQuit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSock", &fSock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*aEvent", &aEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mMultiGraph", &mMultiGraph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*mGraphs", &mGraphs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aNrGraphs", &aNrGraphs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aGetData", &aGetData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*h", &h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preTracks", &preTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "preSamples", &preSamples);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_mySpy(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mySpy : new ::mySpy;
   }
   static void *newArray_mySpy(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::mySpy[nElements] : new ::mySpy[nElements];
   }
   // Wrapper around operator delete
   static void delete_mySpy(void *p) {
      delete ((::mySpy*)p);
   }
   static void deleteArray_mySpy(void *p) {
      delete [] ((::mySpy*)p);
   }
   static void destruct_mySpy(void *p) {
      typedef ::mySpy current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::mySpy

//______________________________________________________________________________
void AEvent::Streamer(TBuffer &R__b)
{
   // Stream an object of class AEvent.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(AEvent::Class(),this);
   } else {
      R__b.WriteClassBuffer(AEvent::Class(),this);
   }
}

//______________________________________________________________________________
void AEvent::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class AEvent.
      TClass *R__cl = ::AEvent::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aTrackVector", (void*)&aTrackVector);
      R__insp.InspectMember("vector<ATrack*>", (void*)&aTrackVector, "aTrackVector.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "it", (void*)&it);
      R__insp.InspectMember("vector<ATrack*,allocator<ATrack*> >::iterator", (void*)&it, "it.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aEventNr", &aEventNr);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_AEvent(void *p) {
      return  p ? new(p) ::AEvent : new ::AEvent;
   }
   static void *newArray_AEvent(Long_t nElements, void *p) {
      return p ? new(p) ::AEvent[nElements] : new ::AEvent[nElements];
   }
   // Wrapper around operator delete
   static void delete_AEvent(void *p) {
      delete ((::AEvent*)p);
   }
   static void deleteArray_AEvent(void *p) {
      delete [] ((::AEvent*)p);
   }
   static void destruct_AEvent(void *p) {
      typedef ::AEvent current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::AEvent

//______________________________________________________________________________
void ATrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class ATrack.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(ATrack::Class(),this);
   } else {
      R__b.WriteClassBuffer(ATrack::Class(),this);
   }
}

//______________________________________________________________________________
void ATrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class ATrack.
      TClass *R__cl = ::ATrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aTrackNr", &aTrackNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aCardNr", &aCardNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aChannelNr", &aChannelNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aOffset", &aOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aRange", &aRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aDataSize", &aDataSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "aSampling", &aSampling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*aData", &aData);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_ATrack(void *p) {
      return  p ? new(p) ::ATrack : new ::ATrack;
   }
   static void *newArray_ATrack(Long_t nElements, void *p) {
      return p ? new(p) ::ATrack[nElements] : new ::ATrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_ATrack(void *p) {
      delete ((::ATrack*)p);
   }
   static void deleteArray_ATrack(void *p) {
      delete [] ((::ATrack*)p);
   }
   static void destruct_ATrack(void *p) {
      typedef ::ATrack current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::ATrack

namespace ROOT {
   void vectorlEATrackmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEATrackmUgR_Dictionary();
   static void *new_vectorlEATrackmUgR(void *p = 0);
   static void *newArray_vectorlEATrackmUgR(Long_t size, void *p);
   static void delete_vectorlEATrackmUgR(void *p);
   static void deleteArray_vectorlEATrackmUgR(void *p);
   static void destruct_vectorlEATrackmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<ATrack*>*)
   {
      vector<ATrack*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<ATrack*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<ATrack*>", -2, "/usr/local/root/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<ATrack*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEATrackmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<ATrack*>) );
      instance.SetNew(&new_vectorlEATrackmUgR);
      instance.SetNewArray(&newArray_vectorlEATrackmUgR);
      instance.SetDelete(&delete_vectorlEATrackmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEATrackmUgR);
      instance.SetDestructor(&destruct_vectorlEATrackmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<ATrack*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<ATrack*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEATrackmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<ATrack*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEATrackmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ATrack*> : new vector<ATrack*>;
   }
   static void *newArray_vectorlEATrackmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<ATrack*>[nElements] : new vector<ATrack*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEATrackmUgR(void *p) {
      delete ((vector<ATrack*>*)p);
   }
   static void deleteArray_vectorlEATrackmUgR(void *p) {
      delete [] ((vector<ATrack*>*)p);
   }
   static void destruct_vectorlEATrackmUgR(void *p) {
      typedef vector<ATrack*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<ATrack*>

/********************************************************
* mySpyDict.cpp
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablemySpyDict();

extern "C" void G__set_cpp_environmentmySpyDict() {
  G__cpp_reset_tagtablemySpyDict();
}
#include <new>
extern "C" int G__cpp_dllrevmySpyDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* ATrack */
static int G__mySpyDict_374_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ATrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ATrack[n];
     } else {
       p = new((void*) gvp) ATrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new ATrack;
     } else {
       p = new((void*) gvp) ATrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_ATrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ATrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ATrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Short_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) ATrack(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Short_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_ATrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   ATrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new ATrack(*(ATrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) ATrack(*(ATrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_ATrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const ATrack& obj = ((ATrack*) G__getstructoffset())->operator=(*(ATrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((ATrack*) G__getstructoffset())->AddData((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetTrackNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetCardNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetChannelNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const ATrack*) G__getstructoffset())->GetDataSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const ATrack*) G__getstructoffset())->GetSampling());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 83, (long) ((const ATrack*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ATrack*) G__getstructoffset())->Write2F(*(ofstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ATrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ATrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ATrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ATrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((ATrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ATrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ATrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ATrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_374_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ATrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef ATrack G__TATrack;
static int G__mySpyDict_374_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (ATrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((ATrack*) (soff+(sizeof(ATrack)*i)))->~G__TATrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (ATrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((ATrack*) (soff))->~G__TATrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* AEvent */
static int G__mySpyDict_375_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AEvent[n];
     } else {
       p = new((void*) gvp) AEvent[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new AEvent;
     } else {
       p = new((void*) gvp) AEvent;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_AEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const AEvent& obj = ((AEvent*) G__getstructoffset())->operator=(*(AEvent*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   AEvent* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new AEvent(*(AEvent*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) AEvent(*(AEvent*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_AEvent));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->AddTrack((ATrack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->RemoveTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->ClearEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->SetEventNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AEvent*) G__getstructoffset())->GetEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->EventShow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const AEvent*) G__getstructoffset())->GetNrTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const AEvent*) G__getstructoffset())->GetEventSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const AEvent*) G__getstructoffset())->GetTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->Write2F(*(ofstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) AEvent::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AEvent::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) AEvent::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      AEvent::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((AEvent*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AEvent::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AEvent::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) AEvent::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_375_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) AEvent::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef AEvent G__TAEvent;
static int G__mySpyDict_375_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (AEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((AEvent*) (soff+(sizeof(AEvent)*i)))->~G__TAEvent();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (AEvent*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((AEvent*) (soff))->~G__TAEvent();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* mySpy */
static int G__mySpyDict_383_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mySpy* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mySpy[n];
     } else {
       p = new((void*) gvp) mySpy[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new mySpy;
     } else {
       p = new((void*) gvp) mySpy;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_mySpy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySpy*) G__getstructoffset())->Connect();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySpy*) G__getstructoffset())->DoButton();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) mySpy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySpy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) mySpy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      mySpy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const mySpy*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySpy*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySpy*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((mySpy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySpy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mySpy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) mySpy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__mySpyDict_383_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) mySpy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__mySpyDict_383_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   mySpy* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new mySpy(*(mySpy*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__mySpyDictLN_mySpy));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef mySpy G__TmySpy;
static int G__mySpyDict_383_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (mySpy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((mySpy*) (soff+(sizeof(mySpy)*i)))->~G__TmySpy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (mySpy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((mySpy*) (soff))->~G__TmySpy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__mySpyDict_383_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   mySpy* dest = (mySpy*) G__getstructoffset();
   *dest = *(mySpy*) libp->para[0].ref;
   const mySpy& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* ATrack */

/* AEvent */

/* mySpy */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncmySpyDict {
 public:
  G__Sizep2memfuncmySpyDict(): p(&G__Sizep2memfuncmySpyDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncmySpyDict::*p)();
};

size_t G__get_sizep2memfuncmySpyDict()
{
  G__Sizep2memfuncmySpyDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancemySpyDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mySpyDictLN_ATrack))) {
     ATrack *G__Lderived;
     G__Lderived=(ATrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mySpyDictLN_ATrack),G__get_linked_tagnum(&G__mySpyDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__mySpyDictLN_AEvent))) {
     AEvent *G__Lderived;
     G__Lderived=(AEvent*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__mySpyDictLN_AEvent),G__get_linked_tagnum(&G__mySpyDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablemySpyDict() {

   /* Setting up typedef entry */
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__mySpyDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TStreamerInfo*>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ATrack*>",117,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__mySpyDictLN_reverse_iteratorlEvectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* ATrack */
static void G__setup_memvarATrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mySpyDictLN_ATrack));
   { ATrack *p; p=(ATrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aTrackNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aCardNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aChannelNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aRange=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aDataSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"aSampling=",0,(char*)NULL);
   G__memvar_setup((void*)0,83,0,0,-1,G__defined_typename("Short_t"),-1,4,"aData=",0,"[aDataSize]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* AEvent */
static void G__setup_memvarAEvent(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mySpyDictLN_AEvent));
   { AEvent *p; p=(AEvent*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR),G__defined_typename("vector<ATrack*>"),-1,4,"aTrackVector=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiterator),-1,-1,4,"it=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"aEventNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* mySpy */
static void G__setup_memvarmySpy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__mySpyDictLN_mySpy));
   { mySpy *p; p=(mySpy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGMainFrame),-1,-1,4,"fMain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TRootEmbeddedCanvas),-1,-1,4,"fCanvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGHorizontalFrame),-1,-1,4,"fHorz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGHorizontalFrame),-1,-1,4,"fHorz2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGLayoutHints),-1,-1,4,"fLbut=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGLayoutHints),-1,-1,4,"fLhorz=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGLayoutHints),-1,-1,4,"fLcan=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGTextButton),-1,-1,4,"fGet=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGButton),-1,-1,4,"fConnect=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TGButton),-1,-1,4,"fQuit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TSocket),-1,-1,4,"fSock=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_AEvent),-1,-1,4,"aEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TMultiGraph),-1,-1,4,"mMultiGraph=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__mySpyDictLN_TGraph),-1,-1,4,"mGraphs=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"aNrGraphs=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"aGetData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TH1F),-1,-1,4,"h=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"preTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"preSamples=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__mySpyDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarmySpyDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncATrack(void) {
   /* ATrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mySpyDictLN_ATrack));
   G__memfunc_setup("ATrack",566,G__mySpyDict_374_0_1, 105, G__get_linked_tagnum(&G__mySpyDictLN_ATrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ATrack",566,G__mySpyDict_374_0_2, 105, G__get_linked_tagnum(&G__mySpyDictLN_ATrack), -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - card i - 'Int_t' 0 - channel "
"d - 'Double_t' 0 - sampling i - 'Int_t' 0 - offset "
"i - 'Int_t' 0 - range S - 'Short_t' 0 - data "
"i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ATrack",566,G__mySpyDict_374_0_3, 105, G__get_linked_tagnum(&G__mySpyDictLN_ATrack), -1, 0, 1, 1, 1, 0, "u 'ATrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__mySpyDict_374_0_4, 117, G__get_linked_tagnum(&G__mySpyDictLN_ATrack), -1, 1, 1, 1, 1, 0, "u 'ATrack' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddData",643,G__mySpyDict_374_0_5, 105, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - card i - 'Int_t' 0 - channel "
"S - 'Short_t' 0 - data i - 'Int_t' 0 - dataSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrackNr",981,G__mySpyDict_374_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCardNr",858,G__mySpyDict_374_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannelNr",1177,G__mySpyDict_374_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOffset",903,G__mySpyDict_374_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRange",781,G__mySpyDict_374_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataSize",1077,G__mySpyDict_374_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSampling",1115,G__mySpyDict_374_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__mySpyDict_374_0_13, 83, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write2F",643,G__mySpyDict_374_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mySpyDict_374_0_15, 85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&ATrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mySpyDict_374_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ATrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mySpyDict_374_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&ATrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mySpyDict_374_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&ATrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mySpyDict_374_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mySpyDict_374_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ATrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mySpyDict_374_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ATrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mySpyDict_374_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&ATrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mySpyDict_374_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&ATrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~ATrack", 692, G__mySpyDict_374_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncAEvent(void) {
   /* AEvent */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mySpyDictLN_AEvent));
   G__memfunc_setup("AEvent",579,G__mySpyDict_375_0_1, 105, G__get_linked_tagnum(&G__mySpyDictLN_AEvent), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__mySpyDict_375_0_2, 117, G__get_linked_tagnum(&G__mySpyDictLN_AEvent), -1, 1, 1, 1, 1, 0, "u 'AEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AEvent",579,G__mySpyDict_375_0_3, 105, G__get_linked_tagnum(&G__mySpyDictLN_AEvent), -1, 0, 1, 1, 1, 0, "u 'AEvent' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTrack",766,G__mySpyDict_375_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'ATrack' - 0 - aTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTrack",1123,G__mySpyDict_375_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearEvent",1001,G__mySpyDict_375_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventNr",1006,G__mySpyDict_375_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventNr",994,G__mySpyDict_375_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EventShow",931,G__mySpyDict_375_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNrTracks",1096,G__mySpyDict_375_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEventSize",1213,G__mySpyDict_375_0_11, 107, -1, G__defined_typename("ULong_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTrack",789,G__mySpyDict_375_0_12, 85, G__get_linked_tagnum(&G__mySpyDictLN_ATrack), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write2F",643,G__mySpyDict_375_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mySpyDict_375_0_14, 85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&AEvent::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mySpyDict_375_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AEvent::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mySpyDict_375_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&AEvent::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mySpyDict_375_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&AEvent::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mySpyDict_375_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mySpyDict_375_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AEvent::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mySpyDict_375_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AEvent::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mySpyDict_375_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&AEvent::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mySpyDict_375_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&AEvent::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~AEvent", 705, G__mySpyDict_375_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncmySpy(void) {
   /* mySpy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__mySpyDictLN_mySpy));
   G__memfunc_setup("InitGraphs",1017,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WindowsUpdate",1358,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mySpy",546,G__mySpyDict_383_0_3, 105, G__get_linked_tagnum(&G__mySpyDictLN_mySpy), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__mySpyDict_383_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DoButton",815,G__mySpyDict_383_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__mySpyDict_383_0_6, 85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&mySpy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__mySpyDict_383_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySpy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__mySpyDict_383_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&mySpy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__mySpyDict_383_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&mySpy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__mySpyDict_383_0_10, 85, G__get_linked_tagnum(&G__mySpyDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__mySpyDict_383_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__mySpyDict_383_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__mySpyDict_383_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__mySpyDict_383_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySpy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__mySpyDict_383_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mySpy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__mySpyDict_383_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&mySpy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__mySpyDict_383_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&mySpy::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("mySpy", 546, G__mySpyDict_383_0_18, (int) ('i'), G__get_linked_tagnum(&G__mySpyDictLN_mySpy), -1, 0, 1, 1, 1, 0, "u 'mySpy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~mySpy", 672, G__mySpyDict_383_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__mySpyDict_383_0_20, (int) ('u'), G__get_linked_tagnum(&G__mySpyDictLN_mySpy), -1, 1, 1, 1, 1, 0, "u 'mySpy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncmySpyDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalmySpyDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcmySpyDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__mySpyDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TGLayoutHints = { "TGLayoutHints" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__mySpyDictLN_TGTextButton = { "TGTextButton" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TGHorizontalFrame = { "TGHorizontalFrame" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TGMainFrame = { "TGMainFrame" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TGButton = { "TGButton" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TRootEmbeddedCanvas = { "TRootEmbeddedCanvas" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR = { "vector<TStreamerInfo*,allocator<TStreamerInfo*> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TStreamerInfo*,allocator<TStreamerInfo*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_ATrack = { "ATrack" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_AEvent = { "AEvent" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR = { "vector<ATrack*,allocator<ATrack*> >" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiterator = { "vector<ATrack*,allocator<ATrack*> >::iterator" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_reverse_iteratorlEvectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ATrack*,allocator<ATrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_TMultiGraph = { "TMultiGraph" , 99 , -1 };
G__linked_taginfo G__mySpyDictLN_mySpy = { "mySpy" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablemySpyDict() {
  G__mySpyDictLN_TClass.tagnum = -1 ;
  G__mySpyDictLN_TBuffer.tagnum = -1 ;
  G__mySpyDictLN_TMemberInspector.tagnum = -1 ;
  G__mySpyDictLN_TObject.tagnum = -1 ;
  G__mySpyDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_TGLayoutHints.tagnum = -1 ;
  G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__mySpyDictLN_TGTextButton.tagnum = -1 ;
  G__mySpyDictLN_TGHorizontalFrame.tagnum = -1 ;
  G__mySpyDictLN_TGMainFrame.tagnum = -1 ;
  G__mySpyDictLN_TGButton.tagnum = -1 ;
  G__mySpyDictLN_TRootEmbeddedCanvas.tagnum = -1 ;
  G__mySpyDictLN_TSocket.tagnum = -1 ;
  G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_ATrack.tagnum = -1 ;
  G__mySpyDictLN_AEvent.tagnum = -1 ;
  G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR.tagnum = -1 ;
  G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiterator.tagnum = -1 ;
  G__mySpyDictLN_reverse_iteratorlEvectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__mySpyDictLN_TH1F.tagnum = -1 ;
  G__mySpyDictLN_TGraph.tagnum = -1 ;
  G__mySpyDictLN_TMultiGraph.tagnum = -1 ;
  G__mySpyDictLN_mySpy.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablemySpyDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGLayoutHints);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGTextButton);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGHorizontalFrame);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGMainFrame);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGButton);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TRootEmbeddedCanvas);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TSocket);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlETStreamerInfomUcOallocatorlETStreamerInfomUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__mySpyDictLN_ATrack),sizeof(ATrack),-1,327424,"simple track",G__setup_memvarATrack,G__setup_memfuncATrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__mySpyDictLN_AEvent),sizeof(AEvent),-1,294656,"simple event",G__setup_memvarAEvent,G__setup_memfuncAEvent);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_vectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_reverse_iteratorlEvectorlEATrackmUcOallocatorlEATrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__mySpyDictLN_TMultiGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__mySpyDictLN_mySpy),sizeof(mySpy),-1,263424,"online client",G__setup_memvarmySpy,G__setup_memfuncmySpy);
}
extern "C" void G__cpp_setupmySpyDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupmySpyDict()");
  G__set_cpp_environmentmySpyDict();
  G__cpp_setup_tagtablemySpyDict();

  G__cpp_setup_inheritancemySpyDict();

  G__cpp_setup_typetablemySpyDict();

  G__cpp_setup_memvarmySpyDict();

  G__cpp_setup_memfuncmySpyDict();
  G__cpp_setup_globalmySpyDict();
  G__cpp_setup_funcmySpyDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncmySpyDict();
  return;
}
class G__cpp_setup_initmySpyDict {
  public:
    G__cpp_setup_initmySpyDict() { G__add_setup_func("mySpyDict",(G__incsetup)(&G__cpp_setupmySpyDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initmySpyDict() { G__remove_setup_func("mySpyDict"); }
};
G__cpp_setup_initmySpyDict G__cpp_setup_initializermySpyDict;

