#include "DGModule.h"

  ClassImp(DGModule)

//-----------------------------------------------------------------------------
     DGModule::DGModule(DModule *module)  : 
      TGMainFrame(gClient->GetRoot(), 0, 0) {

  // I use initial width and height of 0, and resize later 

  char str[80];

  std::cout << "constructing DGModule" << std::endl;
  fModule = module;
  fMemList = new TObjArray();

  fMDes = new TGGroupFrame(this, "Module description", kVerticalFrame);
  fMDat = new TGGroupFrame(this, "Module data",        kVerticalFrame);

  fL1 = new TGLayoutHints(kLHintsCenterX | kLHintsExpandX | kLHintsExpandY , 5,5,5,5);
  fL3 = new TGLayoutHints(kLHintsCenterX | kLHintsExpandX , 5,5,5,5);
  fL2 = new TGLayoutHints(kLHintsLeft, 2,2,5,0);

  fMDes->SetLayoutManager(new TGMatrixLayout(fMDes, 0, 2, 5));
 
  this->AddFrame(fMDes,    fL3);
  this->AddFrame(fMDat,    fL1);
  
  fMemList->Add(fMDes);
  fMemList->Add(fMDat);
  fMemList->Add(fMenuBarLayout);
  fMemList->Add(fL1);
  fMemList->Add(fL2);

  fMDes->AddFrame(new TGLabel(fMDes, new TGString("Generic type:")));
  fMDes->AddFrame(new TGLabel(fMDes, new TGString(fModule->GetGenTypeDescription())));
  fMDes->AddFrame(new TGLabel(fMDes, new TGString("Actual type:")));
  fMDes->AddFrame(new TGLabel(fMDes, new TGString(fModule->GetActTypeDescription())));
  fMDes->AddFrame(new TGLabel(fMDes, new TGString("Base address:")));
  sprintf(str,"0x%x",fModule->GetAdBase());
  fMDes->AddFrame(new TGLabel(fMDes, new TGString(str)));

  this->SetWindowName("VME module");
  this->SetIconName("VME module");
  this->MapSubwindows();
  this->Layout();
  this->MapWindow();

}

//-----------------------------------------------------------------------------
 DGModule::~DGModule() {
  std::cout <<"destroying DGModule" << std::endl;
}
//-----------------------------------------------------------------------------
 Bool_t DGModule::HandleTimer(TTimer *tim) {
  return kTRUE;
}
//-----------------------------------------------------------------------------
 Bool_t DGModule::ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2) {
  // Process events generated by the buttons in the frame.

  //  printf("gdmodule process message called %ld %ld %ldn",msg,parm1,parm2);
  
  switch (GET_MSG(msg)) {
  case kC_COMMAND:
    switch (GET_SUBMSG(msg)) {
    case kCM_CHECKBUTTON:
      break;
    case kCM_MENU:
    default:
      break;
    }
  case kC_TEXTENTRY:
    switch (GET_SUBMSG(msg)) {
    case kTE_ENTER:
      break;
    default:
      break;
    }
    break;
  default:
    break;
  }
  return kTRUE;
}
//-----------------------------------------------------------------------------
